{{!-- 用mustache将之前的例子重写 --}}
<h1>Much Better</h1>
<p>No <span class="code">document.write</span>here!</p>
<p>Today's date is {{today}}.</p>
{{!-- 现在我们要做的就是给{{today}}赋值，这就是模板语言的核心 --}}

{{!-- Jade & Handlebars
Jade是TJ Holowaychuk的设想，他也是为我们带来Express的人，Jade和Express可以很好的结合也就不足为奇了。
Jade不再有尖括号和结束标记。取而代之，它依赖缩进和一些常识性规则，从而更容易表达出自己想要的，更加抽象。
Handlebars是另一个流行的模板引擎Mustache的扩展，简单的javascript集成（前端和后端）和容易掌握的语法，更加平衡。 --}}

{{!-- Handlebars
使用三重大括号“{{{}}}”关闭HTML转义的功能具有一些重要用途。例如，如果用WYSIWYG编辑器建立了一个CMS系统，你大概会希望向视图层传递HTML文本是可行的（可模拟富文本编辑器？）。
此外，能够脱离HTML转义渲染上下文属性对于布局和章节是很重要的。 --}}


{{!-- 1）上下文 --}}
{ customer: ' Buttercup' }
{{!-- 2）模板 --}}
<h1>Meadowlark Travel</h1>
<p>Welcome, {{ customer}}</p>
{{!-- 1) + 2) + handlebars = 3) --}}
{{!-- 3）渲染html --}}
<h1>Meadowlark Travel</h1>
<p>Welcome, Buttercup</p>

{{!-- &1.1 注释 --}}
{{! comment gose here }}

{{!-- &1.2 块级表达式 --}}
{
  currency: {
    name: 'United States dollars',
    abbrev: 'USD'
  },
  tours: [
    {name: 'Hood River', Price: '$99.95'},
    {name: 'Oregon Coast', Price: '$159.95'}
  ],
  specialsUrl: '/january-specials',
  currencies: ['USD', 'GBP', 'BTC']
}
<ul>
  {{#each tours}}
    {{!-- I'm in a new block...and the context has changed --}}
    <li>
      {{name}} - {{Price}}
      {{#if ../currencies}}
        ({{../../currency.abbrev}})
      {{/if}}
    </li>
  {{/each}}
</ul>
{{#unless currencies}}
  <p>All price in {{currency.name}}.</p>
{{/unless}}
{{#if specialsUrl}}
  {{!-- I'm in a new block...but the context hasn't changed(sortof) --}}
  <p>Check out our <a href="{{specialsUrl}}">specials!</a></p>
{{else}}
  <p>Please check back often for specials.</p>
{{/if}}
<p>
  {{#each currencies}}
    <a href="#" class="currency">{{.}}</a>
  {{else}}
    Unfortunately, we currently only accept {{currency.name}}.
  {{/each}}
</p>

{{!-- &1.3 服务器端模板 --}}

{{!-- &1.4 视图和布局 --}}
{{!-- 先渲染视图，再渲染布局 --}}

{{!-- &1.5 在Express中使用（或不使用）布局 --}}
{{!-- 默认情况下，Express会在views子目录中查找视图，在views/layouts下查找布局 --}}

{{!-- 创建视图引擎时，会指定一个默认的布局（下例会将views/layout/main.handlebars作为默认布局） --}}
var handlebars = require('express3-handlebars').create({defaultLayout: 'main'});

{{!-- 若有一个叫做views/foo.handlebars的视图 --}}
{{!-- 不使用布局 --}}
app.get('/foo', function(req, res) {
  res.render('foo', {layout: null});
});
{{!-- 使用一个不同的模板作为布局（下例会使用布局views/layout/main.handlebars来渲染该视图） --}}
app.get('/foo', function(req, res) {
  res.render('foo', {layout: 'microsite'});
});

{{!-- &1.6 局部文件 --}}
{{!-- 例如写一个可重复使用的天气组件，views/partials/weather.handlebars --}}